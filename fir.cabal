name:           fir
version:        0.0.0
synopsis:       An EDSL that compiles to SPIR-V for graphics programming on the GPU in Haskell.
category:       Graphics
author:         Sam Derbyshire
maintainer:     Sam Derbyshire
license:        MIT
build-type:     Simple
cabal-version:  >= 1.10
description:
  __FIR__ is an EDSL for writing GPU shader code in Haskell, compiled to __@SPIR-V@__.
  Requires GHC >= 8.6.
  .
  With this library, shader programs can be written using @do@ notation.
  Such programs are then transformed into abstract syntax trees (ASTs),
  before being compiled to @SPIR-V@ assembly.
  .
  In effect, this replaces @GLSL@ as a shader language.
  This means the Haskell type-system and type-checker are put to use
  in verifying programs at compile time.
  .
  In addition, programs can be manipulated as Haskell objects,
  which allows them to be combined in various ways.
  .
  An overview of the library is include in the __readme__ file.
  .
  See the @fir-examples@ project subdirectory for fleshed out examples,
  including using the @vulkan-api@ package for rendering.
  .
  The exposed modules are:
  .
  * __"FIR"__: the main functionality of the library (creating and compiling programs),
  .
  * __"FIR.Labels"__: optional imperative-like syntax using /OverloadedLabels/,
  .
  * __"Math.Linear"__: vectors, matrices, and operations on them, as used by this library.
  .
  .
  Important types used by this library:
  .
  * __@AST a@__: main AST datatype, see "FIR.AST". A value of type @AST a@ can be thought of as (pure) GPU code
  computing a value of type @a@.
  * __@Codensity AST (AST a := j) i@__: type of a monadic expression,
  starting in state @i@ and ending in state @j@.
  This state is used to keep track of which objects are in scope
  (such as variables, constants, functions, etc).
  A value of this type can be thought of as stateful GPU code.
  Uses McBride-style indexed monads, see "Control.Monad.Indexed".
  * __@Program defs a@__: a shader program that can be compiled to @SPIR-V@, and returns a value of type @a@.
  @defs@ is a type-level list of shader inputs/ouputs (uniforms, varyings, etc), and top-level functions.
  See "FIR.Program".
  .
  .
  It is recommended to install the [Vulkan SDK](https://www.lunarg.com/vulkan-sdk/),
  as it provides useful executables to manipulate @SPIR-V@ assembly, such as
  @spirv-dis@ for viewing, @spirv-opt@ for optimising,
  and @spirv-cfg@ for generating control flow graphs.
  It is also possible to use @spirv-cross@ to automatically generate @GLSL@ code
  from @SPIR-V@.


library

    hs-source-dirs:
        src
  
    exposed-modules:
        FIR
      , FIR.Labels
      , Math.Linear

    other-modules:
        CodeGen.Applicative
      , CodeGen.Array
      , CodeGen.Binary
      , CodeGen.CFG
      , CodeGen.CodeGen
      , CodeGen.Composite
      , CodeGen.Debug
      , CodeGen.Functions
      , CodeGen.IDs
      , CodeGen.Images
      , CodeGen.Instruction
      , CodeGen.Monad
      , CodeGen.Optics
      , CodeGen.Phi
      , CodeGen.Pointers
      , CodeGen.PrimOps
      , CodeGen.Put
      , CodeGen.State
      , CodeGen.Untyped
      , Control.Arrow.Strength
      , Control.Monad.Indexed
      , Control.Type.Optic
      , Data.Binary.Class.Put
      , Data.Function.Variadic
      , Data.Map.Traverse
      , Data.Type.Known
      , Data.Type.List
      , Data.Type.Map
      , Data.Type.Snoc
      , Deriving.Base
      , FIR.AST
      , FIR.Binding
      , FIR.Builtin
      , FIR.Definition
      , FIR.Instances.AST
      , FIR.Instances.Bindings
      , FIR.Instances.Codensity
      , FIR.Instances.Images
      , FIR.Instances.Optics
      , FIR.Prim.Array
      , FIR.Prim.Image
      , FIR.Prim.Singletons
      , FIR.Prim.Struct
      , FIR.Prim.Op
      , FIR.Program
      , FIR.Synonyms
      , FIR.Temp
      , Math.Algebra.Class
      , Math.Algebra.GradedSemigroup
      , Math.Logic.Bits
      , Math.Logic.Class
      , SPIRV.Builtin
      , SPIRV.Capability
      , SPIRV.Decoration
      , SPIRV.ExecutionMode
      , SPIRV.Extension
      , SPIRV.FunctionControl
      , SPIRV.Image
      , SPIRV.Operation
      , SPIRV.PrimOp
      , SPIRV.PrimTy
      , SPIRV.ScalarTy
      , SPIRV.Stage
      , SPIRV.Storage

    build-depends: 
        base
          >= 4.12
      , filepath
      , binary
      , bytestring
      , containers
      , mtl
      , transformers
      , tree-view
      , text-utf8
      , vector
          >= 0.12.0.1
      , data-binary-ieee754
          >= 0.4.4
      , half
          >= 0.3
      , lens
          >= 4.16
      , distributive
          >= 0.6
      , constraints
          >= 0.10
      , typelits-witnesses
          >= 0.2.3
      , ghc-typelits-knownnat 
          >= 0.6
      , ghc-typelits-natnormalise 
          >= 0.6.2
      -- for testing
      , directory
          >= 1.3.3.0
      , process
          >= 1.6.3.0

    default-language:
        Haskell2010

    ghc-options:
        -Wall
        -Wcompat
        -fno-warn-orphans
        -fno-warn-unticked-promoted-constructors
        -fno-warn-unused-do-bind
        -fwarn-missing-local-signatures
        -fwarn-incomplete-uni-patterns
        -- -fwarn-redundant-constraints

    if impl(ghc >= 8.6)
        default-extensions:
            NoStarIsType


test-suite fir-test

  hs-source-dirs:
      test

  type:
      detailed-0.9

  test-module:
      Test

  build-depends:
      base
        >= 4.12
    , fir

  default-language:
        Haskell2010
