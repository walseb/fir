

Basic types:
  - ()
  - more widths for Word / Int / Float
  - pointers ???

Compound types:
  - Arrays (containing any basic type)
  - Records/structs (containing any other types)
  - (Syntactic sugar for) complex numbers & quaternions
  - (Syntactic sugar for) tuples

Operations:
  - comparison (using Ordering, not just < <= > >=)
  - rounding operations
  - bitwise operations on numeric types
  - way to lift operations to vectors (like 'fmap')
  - load/store through pointers???
  - glsl utility operations (clamp, mix, step, smoothstep, ...)


Control flow:
  - switch
  - loops


need to think about records/structs and in particular memory layout & alignment concerns
structs should use type-level symbols to access individual components
arrays should use runtime ints


turn back on the unused do bind thing and make it so that there are no warnings

figure out how to use fmap for internal vectors
also need zipWith, e.g. shift operators (zipWith shiftRight intvec datavec)

fix vector indexing to start from 0 and not 1


use deriving-via with FreshSucc


think: do I only want to use load/store for the interface variables, or for those defined along the way?
  - in SPIR-V, for load/store I need everything to be global, so everything would need to be floated to the top


ensure correctness of the binary instance for strings (needed e.g. to import GLSL and to name entry points)
apply RowMajor decoration to matrix type declarations

should be able to simplify "Instruction" by removing forced "resID" & "resTy" arguments


codegen: given entry point data except IDs, in the course of code generation should give entry point IDs