

Basic types:
  - pointers ???

Compound types:
  - Arrays (containing any basic type)
  - Records/structs (containing any other types)
  - (Syntactic sugar for) complex numbers & quaternions
  - (Syntactic sugar for) tuples

Operations:
  - comparison (using Ordering, not just < <= > >=)
  - rounding operations
  - bitwise operations on numeric types
  - way to lift operations to vectors (like 'fmap')
  - load/store through pointers???
  - glsl utility operations (clamp, mix, step, smoothstep, ...)


Control flow:
  - switch
  - loops


need to think about records/structs and in particular memory layout & alignment concerns
structs should use type-level symbols to access individual components
arrays should use runtime ints



fix vector indexing to start from 0 and not 1

figure out how to use fmap for internal vectors/matrices/structs/etc
also need zipWith, e.g. shift operators (zipWith shiftRight intvec datavec)

for some matrix operations (e.g. matrix addition), there are no built-in functions...
instead need to manually "zipWith" using OpCompositeExtra, OpCompositeConstruct



think: do I only want to use load/store for the interface variables, or for those defined along the way?
  - in SPIR-V, for load/store I think I need everything to be global, so everything would need to be floated to the top


ensure correctness of the binary instance for strings (needed e.g. to import GLSL and to name entry points)
apply RowMajor decoration to matrix type declarations



remove dated entry-points code
entry points are specified manually within the code (no longer fundefs), function calls to entry points are not allowed



looking through storage classes for variables:
  - UniformConstant
  - Input (for the ['Read] starting variables)
  - Output (for the ['Write] starting variables)
      - have a custom Program type which sets uniforms, inputs, outputs
  - Uniform
  - PushConstant
  - Variable for function variables (use this with fundef)

program optimisation: when possible, bundle together the vector indexing "At" things into a OpVectorShuffle



address string issues:
  - use Text for error messages
  - figure out which ByteString to use for SPIR-V internal strings (if any)
  - figure out if the ByteString used in Binary.Put is correct
