{-# LANGUAGE BlockArguments  #-}
{-# LANGUAGE DataKinds       #-}
{-# LANGUAGE NamedFieldPuns  #-}
{-# LANGUAGE PatternSynonyms #-}

module FIR.Examples.RayTracing.IOR where

-- base
import Data.Monoid
  ( Sum(..) )

-- containers
import Data.Map.Strict
  ( Map )
import qualified Data.Map.Strict as Map
  ( fromList, lookupLT, lookupGT )

-- vector-sized
import qualified Data.Vector.Sized as Sized.Boxed
  ( Vector )
import qualified Data.Vector.Sized as Sized.Boxed.Vector
  ( generate, zipWith )

-- fir
import FIR
  ( Array(MkArray), GradedSemigroup((<!>)) )
import Math.Linear
  ( V, pattern V2
  , (^+^), (*^)
  )

--------------------------------------------------------------------------

-- | Material interface.
--
-- Outside means: the side the normal vector points to.
data MaterialInterface
  = MaterialInterface
  { outsideMaterial :: IORData
  , insideMaterial  :: IORData
  }

data IORData
  = IORMap ( Map Float ( V 2 Float ) )
  | IORFunction ( Float -> V 2 Float )
  | IORSellmeier [ ( Float, Float ) ]

sellmeier :: [ ( Float, Float ) ] -> ( Float -> Float )
sellmeier coeffs λ = sqrt ( 1 + expansion )
  where
    -- λ² but in μm² instead of nm²
    λμ² :: Float
    λμ² = 1e-6 * λ * λ
    expansion :: Float
    expansion = getSum $ foldMap ( \ ( b, c ) -> Sum ( b * λμ² / ( λμ² - c ) ) ) coeffs

materialInterfaceArray :: MaterialInterface -> Array 82 ( V 4 Float )
materialInterfaceArray ( MaterialInterface { outsideMaterial, insideMaterial } ) = MkArray $ Sized.Boxed.Vector.zipWith (<!>) outsideIORs insideIORs
  where
    outsideIORs, insideIORs :: Sized.Boxed.Vector 82 ( V 2 Float )
    outsideIORs = iorVector outsideMaterial
    insideIORs  = iorVector insideMaterial

iorVector :: IORData -> Sized.Boxed.Vector 82 ( V 2 Float )
iorVector ( IORMap     nks ) = iorVectorFromMap nks
iorVector ( IORFunction f  ) = Sized.Boxed.Vector.generate \ i -> f ( 380 + 5 * fromIntegral i )
iorVector ( IORSellmeier coeffs ) =
  iorVector ( IORFunction f )
    where
      f :: Float -> V 2 Float
      f = ( \ n -> V2 n 0 ) . sellmeier coeffs

iorVectorFromMap :: Map Float ( V 2 Float ) -> Sized.Boxed.Vector 82 ( V 2 Float )
iorVectorFromMap iors = Sized.Boxed.Vector.generate \ i ->
  let
    λ :: Float
    λ = 380 + 5 * fromIntegral i
  in
    case ( Map.lookupLT λ iors, Map.lookupGT λ iors ) of
      ( Nothing         , Nothing          ) -> V2 1 0
      ( Just ( _ , nk  ), Nothing          ) -> nk
      ( Nothing         , Just ( _ , nk  ) ) -> nk
      ( Just ( λ0, nk0 ), Just ( λ1, nk1 ) ) ->
        let
          s :: Float
          s = ( λ - λ0 ) / ( λ1 - λ0 )
        in
          ( 1 - s ) *^ nk0 ^+^ s *^ nk1

au :: Map Float ( V 2 Float )
au = Map.fromList
  [ ( 298.757050, V2 1.795000 1.920375 )
  , ( 302.400421, V2 1.812000 1.920000 )
  , ( 306.133759, V2 1.822625 1.918875 )
  , ( 309.960449, V2 1.830000 1.916000 )
  , ( 313.884003, V2 1.837125 1.911375 )
  , ( 317.908142, V2 1.840000 1.904000 )
  , ( 322.036835, V2 1.834250 1.891375 )
  , ( 326.274139, V2 1.824000 1.878000 )
  , ( 330.624481, V2 1.812000 1.868250 )
  , ( 335.092377, V2 1.798000 1.860000 )
  , ( 339.682678, V2 1.782000 1.851750 )
  , ( 344.400482, V2 1.766000 1.846000 )
  , ( 349.251221, V2 1.752500 1.845250 )
  , ( 354.240509, V2 1.740000 1.848000 )
  , ( 359.374420, V2 1.727625 1.852375 )
  , ( 364.659332, V2 1.716000 1.862000 )
  , ( 370.102020, V2 1.705875 1.883000 )
  , ( 375.709625, V2 1.696000 1.906000 )
  , ( 381.489777, V2 1.684750 1.922500 )
  , ( 387.450562, V2 1.674000 1.936000 )
  , ( 393.600555, V2 1.666000 1.947750 )
  , ( 399.948975, V2 1.658000 1.956000 )
  , ( 406.505493, V2 1.647250 1.959375 )
  , ( 413.280579, V2 1.636000 1.958000 )
  , ( 420.285339, V2 1.628000 1.951375 )
  , ( 427.531647, V2 1.616000 1.940000 )
  , ( 435.032196, V2 1.596250 1.924500 )
  , ( 442.800629, V2 1.562000 1.904000 )
  , ( 450.851562, V2 1.502125 1.875875 )
  , ( 459.200653, V2 1.426000 1.846000 )
  , ( 467.864838, V2 1.345875 1.814625 )
  , ( 476.862213, V2 1.242000 1.796000 )
  , ( 486.212463, V2 1.086750 1.797375 )
  , ( 495.936707, V2 0.916000 1.840000 )
  , ( 506.057861, V2 0.754500 1.956500 )
  , ( 516.600769, V2 0.608000 2.120000 )
  , ( 527.592224, V2 0.491750 2.326250 )
  , ( 539.061646, V2 0.402000 2.540000 )
  , ( 551.040771, V2 0.345500 2.730625 )
  , ( 563.564453, V2 0.306000 2.880000 )
  , ( 576.670593, V2 0.267625 2.940625 )
  , ( 590.400818, V2 0.236000 2.970000 )
  , ( 604.800842, V2 0.212375 3.015000 )
  , ( 619.920898, V2 0.194000 3.060000 )
  , ( 635.816284, V2 0.177750 3.070000 )
  , ( 652.548279, V2 0.166000 3.150000 )
  , ( 670.184753, V2 0.161000 3.445812 )
  , ( 688.800964, V2 0.160000 3.800000 )
  , ( 708.481018, V2 0.160875 4.087687 )
  , ( 729.318665, V2 0.164000 4.357000 )
  , ( 751.419250, V2 0.169500 4.610188 )
  , ( 774.901123, V2 0.176000 4.860000 )
  , ( 799.897949, V2 0.181375 5.125813 )
  , ( 826.561157, V2 0.188000 5.390000 )
  , ( 855.063293, V2 0.198125 5.631250 )
  , ( 885.601257, V2 0.210000 5.880000 )
  ]

ag :: Map Float ( V 2 Float )
ag = Map.fromList
  [ ( 298.757050, V2 1.519000 1.080000 )
  , ( 302.400421, V2 1.496000 0.882000 )
  , ( 306.133759, V2 1.432500 0.761063 )
  , ( 309.960449, V2 1.323000 0.647000 )
  , ( 313.884003, V2 1.142062 0.550875 )
  , ( 317.908142, V2 0.932000 0.504000 )
  , ( 322.036835, V2 0.719062 0.554375 )
  , ( 326.274139, V2 0.526000 0.663000 )
  , ( 330.624481, V2 0.388125 0.818563 )
  , ( 335.092377, V2 0.294000 0.986000 )
  , ( 339.682678, V2 0.253313 1.120687 )
  , ( 344.400482, V2 0.238000 1.240000 )
  , ( 349.251221, V2 0.221438 1.345250 )
  , ( 354.240509, V2 0.209000 1.440000 )
  , ( 359.374420, V2 0.194813 1.533750 )
  , ( 364.659332, V2 0.186000 1.610000 )
  , ( 370.102020, V2 0.192063 1.641875 )
  , ( 375.709625, V2 0.200000 1.670000 )
  , ( 381.489777, V2 0.198063 1.735000 )
  , ( 387.450562, V2 0.192000 1.810000 )
  , ( 393.600555, V2 0.182000 1.878750 )
  , ( 399.948975, V2 0.173000 1.950000 )
  , ( 406.505493, V2 0.172625 2.029375 )
  , ( 413.280579, V2 0.173000 2.110000 )
  , ( 420.285339, V2 0.166688 2.186250 )
  , ( 427.531647, V2 0.160000 2.260000 )
  , ( 435.032196, V2 0.158500 2.329375 )
  , ( 442.800629, V2 0.157000 2.400000 )
  , ( 450.851562, V2 0.151063 2.478750 )
  , ( 459.200653, V2 0.144000 2.560000 )
  , ( 467.864838, V2 0.137313 2.640000 )
  , ( 476.862213, V2 0.132000 2.720000 )
  , ( 486.212463, V2 0.130250 2.798125 )
  , ( 495.936707, V2 0.130000 2.880000 )
  , ( 506.057861, V2 0.129938 2.973750 )
  , ( 516.600769, V2 0.130000 3.070000 )
  , ( 527.592224, V2 0.130063 3.159375 )
  , ( 539.061646, V2 0.129000 3.250000 )
  , ( 551.040771, V2 0.124375 3.348125 )
  , ( 563.564453, V2 0.120000 3.450000 )
  , ( 576.670593, V2 0.119313 3.553750 )
  , ( 590.400818, V2 0.121000 3.660000 )
  , ( 604.800842, V2 0.125500 3.766250 )
  , ( 619.920898, V2 0.131000 3.880000 )
  , ( 635.816284, V2 0.136125 4.010625 )
  , ( 652.548279, V2 0.140000 4.150000 )
  , ( 670.184753, V2 0.140063 4.293125 )
  , ( 688.800964, V2 0.140000 4.440000 )
  , ( 708.481018, V2 0.144313 4.586250 )
  , ( 729.318665, V2 0.148000 4.740000 )
  , ( 751.419250, V2 0.145875 4.908125 )
  , ( 774.901123, V2 0.143000 5.090000 )
  , ( 799.897949, V2 0.142563 5.288750 )
  , ( 826.561157, V2 0.145000 5.500000 )
  , ( 855.063293, V2 0.151938 5.720624 )
  , ( 885.601257, V2 0.163000 5.950000 )
  ]

siC :: Map Float ( V 2 Float )
siC = Map.fromList
  [ ( 309.950012, V2 2.850000 0.174000 )
  , ( 317.897003, V2 2.923000 0.007650 )
  , ( 326.263000, V2 2.899000 0.005980 )
  , ( 335.081024, V2 2.877000 0.004930 )
  , ( 344.389008, V2 2.856000 0.003750 )
  , ( 354.229004, V2 2.836000 0.002890 )
  , ( 364.647003, V2 2.817000 0.002040 )
  , ( 375.696991, V2 2.799000 0.001380 )
  , ( 387.437988, V2 2.781000 0.000839 )
  , ( 399.935028, V2 2.765000 0.000191 )
  , ( 413.266998, V2 2.750000 0.000044 )
  , ( 435.781982, V2 2.730500 0.000000 )
  , ( 466.968018, V2 2.707400 0.000000 )
  , ( 495.920013, V2 2.684000 0.000012 )
  , ( 497.912018, V2 2.687000 0.000000 )
  , ( 515.080994, V2 2.678900 0.000000 )
  , ( 546.166992, V2 2.663100 0.000000 )
  , ( 567.934021, V2 2.655700 0.000000 )
  , ( 577.995056, V2 2.651100 0.000000 )
  , ( 588.979004, V2 2.648800 0.000000 )
  , ( 589.539001, V2 2.647500 0.000000 )
  , ( 615.897034, V2 2.641100 0.000000 )
  , ( 619.900024, V2 2.634000 0.000000 )
  , ( 656.325989, V2 2.629600 0.000000 )
  , ( 691.080994, V2 2.624300 0.000000 )
  , ( 826.533020, V2 2.598000 0.000000 )
  ]

bk7 :: [ ( Float, Float ) ]
bk7 = [ ( 1.03961212 , 6.00069867e-3 )
      , ( 0.231792344, 2.00179144e-2 )
      , ( 1.01046945 , 1.03560653e2  )
      ]

denseFlint :: [ ( Float, Float ) ]
denseFlint =
  [ ( 1.72448482 , 0.0134871947 )
  , ( 0.390104889, 0.0569318095 )
  , ( 1.04572858 , 118.557185   )
  ]

cu :: Map Float ( V 2 Float )
cu = Map.fromList
  [ ( 302.400421, V2 1.380000 1.687000 )
  , ( 306.133759, V2 1.358438 1.703313 )
  , ( 309.960449, V2 1.340000 1.720000 )
  , ( 313.884003, V2 1.329063 1.744563 )
  , ( 317.908142, V2 1.325000 1.770000 )
  , ( 322.036835, V2 1.332500 1.791625 )
  , ( 326.274139, V2 1.340000 1.810000 )
  , ( 330.624481, V2 1.334375 1.822125 )
  , ( 335.092377, V2 1.325000 1.834000 )
  , ( 339.682678, V2 1.317812 1.851750 )
  , ( 344.400482, V2 1.310000 1.872000 )
  , ( 349.251221, V2 1.300313 1.894250 )
  , ( 354.240509, V2 1.290000 1.916000 )
  , ( 359.374420, V2 1.281563 1.931688 )
  , ( 364.659332, V2 1.270000 1.950000 )
  , ( 370.102020, V2 1.249062 1.972438 )
  , ( 375.709625, V2 1.225000 2.015000 )
  , ( 381.489777, V2 1.200000 2.121562 )
  , ( 387.450562, V2 1.180000 2.210000 )
  , ( 393.600555, V2 1.174375 2.177188 )
  , ( 399.948975, V2 1.175000 2.130000 )
  , ( 406.505493, V2 1.177500 2.160063 )
  , ( 413.280579, V2 1.180000 2.210000 )
  , ( 420.285339, V2 1.178125 2.249938 )
  , ( 427.531647, V2 1.175000 2.289000 )
  , ( 435.032196, V2 1.172812 2.326000 )
  , ( 442.800629, V2 1.170000 2.362000 )
  , ( 450.851562, V2 1.165312 2.397625 )
  , ( 459.200653, V2 1.160000 2.433000 )
  , ( 467.864838, V2 1.155312 2.469187 )
  , ( 476.862213, V2 1.150000 2.504000 )
  , ( 486.212463, V2 1.142812 2.535875 )
  , ( 495.936707, V2 1.135000 2.564000 )
  , ( 506.057861, V2 1.131562 2.589625 )
  , ( 516.600769, V2 1.120000 2.605000 )
  , ( 527.592224, V2 1.092437 2.595562 )
  , ( 539.061646, V2 1.040000 2.583000 )
  , ( 551.040771, V2 0.950375 2.576500 )
  , ( 563.564453, V2 0.826000 2.599000 )
  , ( 576.670593, V2 0.645875 2.678062 )
  , ( 590.400818, V2 0.468000 2.809000 )
  , ( 604.800842, V2 0.351250 3.010750 )
  , ( 619.920898, V2 0.272000 3.240000 )
  , ( 635.816284, V2 0.230813 3.458187 )
  , ( 652.548279, V2 0.214000 3.670000 )
  , ( 670.184753, V2 0.209250 3.863125 )
  , ( 688.800964, V2 0.213000 4.050000 )
  , ( 708.481018, V2 0.216250 4.239563 )
  , ( 729.318665, V2 0.223000 4.430000 )
  , ( 751.419250, V2 0.236500 4.619563 )
  , ( 774.901123, V2 0.250000 4.817000 )
  , ( 799.897949, V2 0.254188 5.034125 )
  , ( 826.561157, V2 0.260000 5.260000 )
  , ( 855.063293, V2 0.280000 5.485625 )
  , ( 885.601257, V2 0.300000 5.717000 )
  ]
