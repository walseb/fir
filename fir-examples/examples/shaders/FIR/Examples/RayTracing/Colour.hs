
{-# LANGUAGE BlockArguments        #-}
{-# LANGUAGE DataKinds             #-}
{-# LANGUAGE NegativeLiterals      #-}
{-# LANGUAGE PartialTypeSignatures #-}
{-# LANGUAGE RebindableSyntax      #-}
{-# LANGUAGE ScopedTypeVariables   #-}
{-# LANGUAGE TypeApplications      #-}

module FIR.Examples.RayTracing.Colour
  ( wavelengthToXYZ
  , xyzToRGB, rgbToXYZ
  , rgbToSpectrum
  , blackbodySpectrum
  )
  where

-- base
import Data.Maybe
  ( fromJust )
import GHC.TypeNats
  ( KnownNat )

-- vector-sized
import qualified Data.Vector.Sized as Vector
  ( fromList )

-- fir
import FIR
import Math.Linear

--------------------------------------------------------------------------

-- | Convert a wavelength to a tri-stimulus XYZ value.
wavelengthToXYZ :: Code Float -> Program s s ( Code ( V 3 Float ) )
wavelengthToXYZ λ = 
  if λ < 380 || λ > 780
  then pure $ Vec3 0 0 0
  else do
    l <- let' @( Code Float  ) $ 0.2 * ( λ - 380 )
    i <- let' @( Code Word32 ) $ floor l
    s <- let' @( Code Float  ) $ l - fromIntegral i
    t <- let' @( Code Float  ) $ 1 - s
    let
      interp :: KnownNat n => Code ( Array n Float ) -> Code Float
      interp arr = t * view @( AnIndex ( Code Word32 ) )   i       arr
                 + s * view @( AnIndex ( Code Word32 ) ) ( i + 1 ) arr
    let' $
      Vec3
        ( interp ( Lit cie_x ) )
        ( interp ( Lit cie_y ) )
        ( interp ( Lit cie_z ) )

-- | Convert an XYZ tri-stimulus value to RGB
-- (sRGB under D65 standard illuminant).
xyzToRGB :: Code ( V 3 Float ) -> Code ( V 3 Float )
xyzToRGB = ( xyzToRGBMatrix !*^ )
  where
    xyzToRGBMatrix :: Code ( M 3 3 Float )
    xyzToRGBMatrix =
      Mat33
          3.2404542 -1.5371385 -0.4985314
         -0.9692660  1.8760108  0.0415560
          0.0556434 -0.2040259  1.0572252

-- | Convert RGB to an XYZ tri-stimulus value.
rgbToXYZ :: Code ( V 3 Float ) -> Code ( V 3 Float )
rgbToXYZ = ( rgbToXYZMatrix !*^ )
  where
    rgbToXYZMatrix :: Code ( M 3 3 Float )
    rgbToXYZMatrix =
      Mat33
        0.41239080 0.35758434 0.18048079
        0.21263901 0.71516868 0.07219232
        0.01933082 0.11919478 0.95053215

-- | Create a vaguely plausible spectrum from an RGB value.
rgbToSpectrum :: Code ( V 3 Float ) -> Code Float -> Program s s ( Code Float )
rgbToSpectrum ( Vec3 r g b ) λ = do
  if λ < 380 || λ > 780
  then pure $ ( r + g + b ) / 3
  else do
    l <- let' @( Code Float  ) $ 0.2 * ( λ - 380 )
    i <- let' @( Code Word32 ) $ floor l
    s <- let' @( Code Float  ) $ l - fromIntegral i
    t <- let' @( Code Float  ) $ 1 - s
    let
      interp :: KnownNat n => Code ( Array n Float ) -> Code Float
      interp arr = t * view @( AnIndex ( Code Word32 ) )   i       arr
                 + s * view @( AnIndex ( Code Word32 ) ) ( i + 1 ) arr
    let'
      $ ( r * interp ( Lit rgb_r ) )
      + ( g * interp ( Lit rgb_g ) )
      + ( b * interp ( Lit rgb_b ) )

-- | Computation of the spectral radiance of a blackbody using Planck's law.
blackbodySpectrum
  :: Code Float -- ^ Temperature (in Kelvin).
  -> Code Float -- ^ Wavelength (in nanometers).
  -> Program s s ( Code Float )
blackbodySpectrum temp λ0 = do
  λ <- let' $ 1e-9 * λ0
  h <- let' $ 6.62606957e-34 -- Planck's constant  ( J*s )
  c <- let' $ 299792458      -- Speed of light     ( m/s )
  k <- let' $ 1.3806488e-23  -- Boltzmann constant ( J/K )
  let' $ 2 * h * c * c
       / ( ( λ ** 5 )
         * ( exp ( h * c / ( k * temp * λ ) ) - 1 )
         )

--------------------------------------------------------------------------

-- | CIE colour matching data, from 380nm to 785nm in steps of 5nm.
cie_x, cie_y, cie_z :: Array 82 Float
cie_x = MkArray . fromJust . Vector.fromList $
  [ 0.001368, 0.002236, 0.004243, 0.00765 , 0.01431 , 0.02319 , 0.04351 , 0.07763 , 0.13438 , 0.21477
  , 0.2839  , 0.3285  , 0.34828 , 0.34806 , 0.3362  , 0.3187  , 0.2908  , 0.2511  , 0.19536 , 0.1421
  , 0.09564 , 0.05795 , 0.03201 , 0.0147  , 0.0049  , 0.0024  , 0.0093  , 0.0291  , 0.06327 , 0.1096
  , 0.1655  , 0.22575 , 0.2904  , 0.3597  , 0.43345 , 0.51205 , 0.5945  , 0.6784  , 0.7621  , 0.8425
  , 0.9163  , 0.9786  , 1.0263  , 1.0567  , 1.0622  , 1.0456  , 1.0026  , 0.9384  , 0.85445 , 0.7514
  , 0.6424  , 0.5419  , 0.4479  , 0.3608  , 0.2835  , 0.2187  , 0.1649  , 0.1212  , 0.0874  , 0.0636
  , 0.04677 , 0.0329  , 0.0227  , 0.01584 , 0.011359, 0.008111, 0.00579 , 0.004109, 0.002899, 0.002049
  , 0.00144 , 0.001   , 0.00069 , 0.000476, 0.000332, 0.000235, 0.000166, 0.000117, 0.000083, 0.000059
  , 0.000042, 0
  ]
cie_y = MkArray . fromJust . Vector.fromList $
  [ 0.000039, 0.000064, 0.00012 , 0.000217, 0.000396, 0.00064 , 0.00121 , 0.00218 , 0.004   , 0.0073
  , 0.0116  , 0.01684 , 0.023   , 0.0298  , 0.038   , 0.048   , 0.06    , 0.0739  , 0.09098 , 0.1126
  , 0.13902 , 0.1693  , 0.20802 , 0.2586  , 0.323   , 0.4073  , 0.503   , 0.6082  , 0.71    , 0.7932
  , 0.862   , 0.91485 , 0.954   , 0.9803  , 0.99495 , 1       , 0.995   , 0.9786  , 0.952   , 0.9154
  , 0.87    , 0.8163  , 0.757   , 0.6949  , 0.631   , 0.5668  , 0.503   , 0.4412  , 0.381   , 0.321
  , 0.265   , 0.217   , 0.175   , 0.1382  , 0.107   , 0.0816  , 0.061   , 0.04458 , 0.032   , 0.0232
  , 0.017   , 0.01192 , 0.00821 , 0.005723, 0.004102, 0.002929, 0.002091, 0.001484, 0.001047, 0.00074
  , 0.00052 , 0.000361, 0.000249, 0.000172, 0.00012 , 0.000085, 0.00006 , 0.000042, 0.00003 , 0.000021
  , 0.000015, 0
  ]
cie_z = MkArray . fromJust . Vector.fromList $
  [ 0.00645 , 0.01055 , 0.02005 , 0.03621 , 0.06785 , 0.1102  , 0.2074  , 0.3713  , 0.6456  , 1.03905
  , 1.3856  , 1.62296 , 1.74706 , 1.7826  , 1.77211 , 1.7441  , 1.6692  , 1.5281  , 1.28764 , 1.0419
  , 0.81295 , 0.6162  , 0.46518 , 0.3533  , 0.272   , 0.2123  , 0.1582  , 0.1117  , 0.07825 , 0.05725
  , 0.04216 , 0.02984 , 0.0203  , 0.0134  , 0.00875 , 0.00575 , 0.0039  , 0.00275 , 0.0021  , 0.0018
  , 0.00165 , 0.0014  , 0.0011  , 0.001   , 0.0008  , 0.0006  , 0.00034 , 0.00024 , 0.00019 , 0.0001
  , 0.00005 , 0.00003 , 0.00002 , 0.00001 , 0       , 0       , 0       , 0       , 0       , 0
  , 0       , 0       , 0       , 0       , 0       , 0       , 0       , 0       , 0       , 0
  , 0       , 0       , 0       , 0       , 0       , 0       , 0       , 0       , 0       , 0
  , 0       , 0
  ]

-- | Candidate RGB spectral distributions, from 380nm to 785nm in steps of 5nm.
--
-- Based on:
--  "Spectral Primary Decomposition for Rendering with sRGB Reflectance"
--    -- Ian Mallett, Cem Yuksel
rgb_r, rgb_g, rgb_b :: Array 82 Float
rgb_r = MkArray . fromJust . Vector.fromList $
  [ 0.327457413827055  , 0.323750578270541  , 0.313439461251577  , 0.288879382755265  , 0.239205681158886  , 0.189702036890535  , 0.121746067959218  , 0.074578270669466  , 0.0444331586340337 , 0.0289286321285029
  , 0.0223166534847512 , 0.0169113072926318 , 0.0141811071179667 , 0.0130531426774873 , 0.011986163627845  , 0.0112887147124048 , 0.0109060664656517 , 0.0104007134810042 , 0.0106373602541465 , 0.0109076625337741
  , 0.0110327124480988 , 0.0113106565912268 , 0.0111546420569403 , 0.0101487704062122 , 0.00891858211883843, 0.00768557633847106, 0.00670570828469526, 0.00599580598764424, 0.00553725664234189, 0.00519378424120663
  , 0.00502536226522334, 0.00513636276967508, 0.00543320026053983, 0.00581998590243535, 0.00640057277462412, 0.00744952868340878, 0.00858363581937657, 0.0103957624651674 , 0.0135654335386492 , 0.0193845158399742
  , 0.0320840712020024 , 0.0743560378459411 , 0.624393724178075  , 0.91831003276872   , 0.949253030175051  , 0.958187833329246  , 0.958187751332698  , 0.958187625087782  , 0.955679060771746  , 0.958006154893429
  , 0.954101573456564  , 0.947607606237237  , 0.938681328447549  , 0.924466682751434  , 0.904606025333056  , 0.880412198927933  , 0.8477878731517    , 0.805779126623019  , 0.752531853871421  , 0.686439396844578
  , 0.61869457086061   , 0.540264443959111  , 0.472964416293838  , 0.432701596704049  , 0.405358045528392  , 0.385491834974902  , 0.370983584551061  , 0.357608701523081  , 0.348712800108393  , 0.344880119344691
  , 0.341917877323291  , 0.339531092987129  , 0.337169503774367  , 0.336172018527717  , 0.335167443433363  , 0.334421625306463  , 0.334008760376402  , 0.333915792790082  , 0.333818454946367  , 0.333672774928456
  , 0.333569513405591  , 0.333569513405591
  ]
rgb_g = MkArray . fromJust . Vector.fromList $
  [ 0.331861713085874 , 0.329688187759399 , 0.327860021624697 , 0.319173580231756 , 0.294322583694842 , 0.258697064768736 , 0.188894319254765 , 0.125388381991689 , 0.0786870603106217, 0.0531432708659453
  , 0.0422881460313421, 0.0333183455029171, 0.0297559481859724, 0.0303312505369047, 0.0309885718973007, 0.0316863551888381, 0.0346699615029974, 0.034551957443675 , 0.0406848061948297, 0.0544600373694056
  , 0.0809052874204737, 0.146348302857044 , 0.379679643296617 , 0.766744268654033 , 0.87621474761337  , 0.918491655613843 , 0.940655562534437 , 0.95373188453302  , 0.961643279840238 , 0.967200019685078
  , 0.970989746390046 , 0.972852303563554 , 0.973116594076444 , 0.973351069154143 , 0.973351115544369 , 0.972261079731725 , 0.973351021746917 , 0.973148495185693 , 0.971061306300914 , 0.966371305955183
  , 0.954941967502548 , 0.913578989551261 , 0.364348803907687 , 0.0715072425408851, 0.0412304344713751, 0.0324238741836685, 0.0319246297982003, 0.0312760331730969, 0.0326303704290574, 0.0295308721490739
  , 0.0315617611702464, 0.0356742182708204, 0.0414030053955673, 0.0506042604489561, 0.0634343003817003, 0.0789182452939229, 0.0995427426653747, 0.125595760093287 , 0.15759091044168  , 0.19539823904421
  , 0.231474474772178 , 0.268852136095262 , 0.296029164217928 , 0.309754994441945 , 0.317815883383822 , 0.322990347389898 , 0.326353847938009 , 0.32914390227898  , 0.330808726803682 , 0.331482689922243
  , 0.331984550352389 , 0.332341172522545 , 0.332912009415539 , 0.332919279695214 , 0.333027672578856 , 0.33317970467326  , 0.333247030974549 , 0.333259349210601 , 0.333275050279383 , 0.333294328448732
  , 0.333309424957775 , 0.333309424957775
  ]
rgb_b = MkArray . fromJust . Vector.fromList $
  [ 0.340680791548052 , 0.346561186624852 , 0.358700493140351 , 0.391947026588195 , 0.466471730587333  , 0.551600895598602  , 0.689359610948928  , 0.800033346878607 , 0.876879780935314 , 0.917928097443955
  , 0.935395200669632 , 0.949770347115183 , 0.95606294480524  , 0.956615606890316 , 0.957025264931328  , 0.957024930534713  , 0.954423972737066  , 0.955047329020204 , 0.948677833093334 , 0.934632299842328
  , 0.908061999852269 , 0.842341039463727 , 0.609165715365647 , 0.223106960959533 , 0.114866670291336  , 0.0738227678957437 , 0.0526387287910555 , 0.0402723090168887, 0.0328194626509591, 0.0276061959270456
  , 0.0239848911270394, 0.0220113333527922, 0.0214502052559966, 0.0208289445095685, 0.0202483113888087 , 0.0202893914512066 , 0.018065342335913  , 0.0164557422344685, 0.0153732601340955, 0.0142441784845517
  , 0.0129739615543347, 0.0120649741345218, 0.0112574781603901, 0.0101827246716942, 0.00951653538723741, 0.00938829272866817, 0.00988761909067028, 0.0105363420064589, 0.0116905688374448, 0.0124629728871037
  , 0.0143366651774203, 0.0167181753275443, 0.0199156660750025, 0.024929056163281 , 0.0319596735860402 , 0.0406695540952484 , 0.0526693824219396 , 0.0686251105141947, 0.0898772323000136, 0.118162358926434
  , 0.149830947442133 , 0.190883409341834 , 0.231006403025217 , 0.257543385422202 , 0.276826038721536  , 0.291517772810795  , 0.302662506083233  , 0.313247301302886 , 0.320478325124633 , 0.323636994707961
  , 0.3260973088469   , 0.328127369340184 , 0.329917975958888 , 0.330907901216649 , 0.331803633095995  , 0.332396627255361  , 0.332740780726824  , 0.332820857081489 , 0.332901731283444 , 0.333025967488632
  , 0.333111083081497 , 0.333111083081497
  ]
